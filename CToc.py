# coding: utf-8

import socket
import Cserver

"""
									███╗░░░███╗░█████╗░██████╗░██████╗░██╗░█████╗░███╗░░██╗
									████╗░████║██╔══██╗██╔══██╗██╔══██╗██║██╔══██╗████╗░██║
									██╔████╔██║██║░░██║██████╔╝██████╔╝██║██║░░██║██╔██╗██║
									██║╚██╔╝██║██║░░██║██╔══██╗██╔═══╝░██║██║░░██║██║╚████║
									██║░╚═╝░██║╚█████╔╝██║░░██║██║░░░░░██║╚█████╔╝██║░╚███║
									╚═╝░░░░░╚═╝░╚════╝░╚═╝░░╚═╝╚═╝░░░░░╚═╝░╚════╝░╚═╝░░╚══╝


			 ██████ ██       █████  ███████ ███████     ███    ███  ██████  ██████  ██████  ██  ██████  ███    ██ 
			██      ██      ██   ██ ██      ██          ████  ████ ██    ██ ██   ██ ██   ██ ██ ██    ██ ████   ██ 
			██      ██      ███████ ███████ ███████     ██ ████ ██ ██    ██ ██████  ██████  ██ ██    ██ ██ ██  ██ 
			██      ██      ██   ██      ██      ██     ██  ██  ██ ██    ██ ██   ██ ██      ██ ██    ██ ██  ██ ██ 
			 ██████ ███████ ██   ██ ███████ ███████     ██      ██  ██████  ██   ██ ██      ██  ██████  ██   ████ """

class TIC():
	
	"""
								██╗███╗   ██╗██╗████████╗██╗ █████╗ ████████╗███████╗██╗   ██╗██████╗ 
								██║████╗  ██║██║╚══██╔══╝██║██╔══██╗╚══██╔══╝██╔════╝██║   ██║██╔══██╗
								██║██╔██╗ ██║██║   ██║   ██║███████║   ██║   █████╗  ██║   ██║██████╔╝
								██║██║╚██╗██║██║   ██║   ██║██╔══██║   ██║   ██╔══╝  ██║   ██║██╔══██╗
								██║██║ ╚████║██║   ██║   ██║██║  ██║   ██║   ███████╗╚██████╔╝██║  ██║
								╚═╝╚═╝  ╚═══╝╚═╝   ╚═╝   ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝ ╚═════╝ ╚═╝  ╚═╝
	"""
	def __init__(self,serveur = None):

		self.__nb_strokes = 1 #Private <int>
		self.__nb_StrokesMax = 9 #Private [const <int>]

		self.__values = ["1","2","3","4","5","6","7","8","9"] #Private <list>
		self.__list = ["1","2","3","4","5","6","7","8","9"] #Private <list>

		self.__whyWin = 0 #Private <int>

		self.__continue = True	#Private <int>
		
		self.__combination = [[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]] #private [2D <list>]
	
	"""
							 █████╗ ███████╗███████╗███████╗███████╗███████╗███████╗██╗   ██╗██████╗ ███████╗
							██╔══██╗██╔════╝██╔════╝██╔════╝██╔════╝██╔════╝██╔════╝██║   ██║██╔══██╗██╔════╝
							███████║███████╗███████╗█████╗  ███████╗███████╗█████╗  ██║   ██║██████╔╝███████╗
							██╔══██║╚════██║╚════██║██╔══╝  ╚════██║╚════██║██╔══╝  ██║   ██║██╔══██╗╚════██║
							██║  ██║███████║███████║███████╗███████║███████║███████╗╚██████╔╝██║  ██║███████║
							╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚══════
	"""
	def get_nb_strockes(self) :
		return self.__nb_strokes

	def get_nb_strockesMax(self):
		return self.__nb_StrokesMax

	def get_whyWin(self) :
		return self.__whyWin

	def get_continue(self) : 
		return self.__continue

	def get_list(self) :
		return self.__list

	"""
							███╗   ███╗██╗   ██╗████████╗ █████╗ ████████╗███████╗██╗   ██╗██████╗ ███████╗
							████╗ ████║██║   ██║╚══██╔══╝██╔══██╗╚══██╔══╝██╔════╝██║   ██║██╔══██╗██╔════╝
							██╔████╔██║██║   ██║   ██║   ███████║   ██║   █████╗  ██║   ██║██████╔╝███████╗
							██║╚██╔╝██║██║   ██║   ██║   ██╔══██║   ██║   ██╔══╝  ██║   ██║██╔══██╗╚════██║
							██║ ╚═╝ ██║╚██████╔╝   ██║   ██║  ██║   ██║   ███████╗╚██████╔╝██║  ██║███████║
							╚═╝     ╚═╝ ╚═════╝    ╚═╝   ╚═╝  ╚═╝   ╚═╝   ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝
	"""

	def set_nb_strockes(self) :
		self.__nb_strokes = self.__nb_strokes + 1

	def set_nb_whyWin(self,why_win) :
		self.__whyWin = why_win

	"""
							███████╗ ██████╗ ███╗   ██╗ ██████╗████████╗██╗ ██████╗ ███╗   ██╗███████╗
							██╔════╝██╔═══██╗████╗  ██║██╔════╝╚══██╔══╝██║██╔═══██╗████╗  ██║██╔════╝
							█████╗  ██║   ██║██╔██╗ ██║██║        ██║   ██║██║   ██║██╔██╗ ██║███████╗
							██╔══╝  ██║   ██║██║╚██╗██║██║        ██║   ██║██║   ██║██║╚██╗██║╚════██║
							██║     ╚██████╔╝██║ ╚████║╚██████╗   ██║   ██║╚██████╔╝██║ ╚████║███████║
							╚═╝      ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝
                                                
	"""

	def user(self,char,color) :

		"""
		=========================================================================
		|							Select the case on the array  				|
		=========================================================================
		"""

		_continue = True

		while _continue:
			_user = input("> ")
			_continue = self.combination(_user,color,char)

	def combination(self,user,color,char) :

		"""
		=========================================================================
		|							Save changes on the list  					|
		=========================================================================
		"""

		_continue = True

		if(self.__values[int(user)-1] != '\033[36m' + 'o' + '\033[37m') and (self.__values[int(user)-1] != '\033[35m' + 'x' + '\033[37m') :

			self.__values[int(user)-1] = color + str(char) + '\033[37m'
			self.__list[int(user)-1] = str(char)

			for i in range(len(self.__combination)) :
				for j in range(len(self.__combination[i])) :

					if(self.__combination[i][j] == int(user)-1) :
						self.__combination[i][j] = char

			_continue = False

		else :
			print("you are not going to take your opponent's position")

		return _continue

	def search(self) :

		"""
		=========================================================================
		|							Search the winner 							|
		=========================================================================
		"""

		size = len(self.__combination)

		for i in range(size) :
			if (i < size) and (self.__combination[i].count('x') == 3) :	
				self.__why_win = 1
				self.__continue = False
			elif (i < size) and (self.__combination[i].count('o') == 3) :
				self.__why_win = 2
				self.__continue = False

	def print_tic_tac_toe(self):

		"""
		=========================================================================
		|							Print array for the morpion					|
		=========================================================================
		"""

		print("\n")
		print("\t     |     |")
		print("\t  {}  |  {}  |  {}".format(self.__values[0], self.__values[1], self.__values[2]))
		print('\t_____|_____|_____')
		print("\t     |     |")
		print("\t  {}  |  {}  |  {}".format(self.__values[3], self.__values[4], self.__values[5]))
		print('\t_____|_____|_____')

		print("\t     |     |")
		print("\t  {}  |  {}  |  {}".format(self.__values[6], self.__values[7], self.__values[8]))
		print("\t     |     |")
		print("\n")
































